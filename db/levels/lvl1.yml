correct_query: "SELECT name from cities;"
level: 
  answer: "[{\"name\"=>\"New York\"}, {\"name\"=>\"Paris\"}, {\"name\"=>\"San Francisco\"}, {\"name\"=>\"London\"}, {\"name\"=>\"Moscow\"}, {\"name\"=>\"Tokyo\"}, {\"name\"=>\"Shanghai\"}]"
  database_path: db/dumps/lvl1.sql
  level_type: read
  prompt: "Select the <code>name</code> column from the <code>cities</code> table."
  stage_number: 1
  title: "Would you like to play a game?"
level_pages: 
  - page_number: 1
    content: "<p>Hello Commander, and welcome to the <code>MISSQL COMMAND</code> console! Your job is to defend the world's cities from a missile attack (and learn some <code>SQL</code> along the way!).</p><p><code>SQL</code>, or <a href='http://en.wikipedia.org/wiki/Sql' target='_blank'>Structured Query Language</a>, is a standarized programming language used to accesss and interact with <a href='http://en.wikipedia.org/wiki/Relational_database' target='_blank'>relational databases</a>.</p><p>So what is a relational database? A relational database is a method of storing data in <em>tables</em>, which have rows and columns. </p>"
  - page_number: 2
    content: "<p>A <em>table</em> is a lot like a spreadsheet. Each <em>row</em> of a table represents a <em>record</em>, which could be an individual item of any kind. Each <em>column</em> in a <em>row</em> represents one property of that record, like its unique identifier, its name, or its strength in megatons.</p><p>Each <em>table</em> generally stores the data for one kind of resource, with its name indicating the kind of resource it stores.</p><p>Tables can be related to each other by holding information about each other's <em>rows</em> (that's where the 'relational' part comes in), but more on that later. For now, there's a pressing need. You must use <code>SQL</code> to save the world from nuclear destruction!</p>"
  - page_number: 3
    content: "<p>So let's get started. We have a small database with a single table: <code>cities</code></p><p>Your first task is get the full list of city names from the database to send to our Civil Defense Corps.</p><p>You'll do that by using a SQL <code>SELECT</code> query. A <code>SELECT</code> statement retrieves data from tables by specifying which columns and rows to pull out. Here's what a basic select query looks like:</p><p><code>SELECT <em>column_name</em> FROM <em>table_name</em>;</code></p><p>Here's an example of how it would be used:</p><p><code>SELECT age FROM cats;</code></p><p>That would <code>SELECT</code> the <code>age</code> column from the <code>cats</code> table, and returns a result table with a list of cat ages. Why don't you give it a try by selecting the <code>name</code> column from the <code>cities</code> table?</p>"
level_schemas: 
  - 
    schema_columns: 
      - 
        column_name: name
        column_type: varchar(255)
      - 
        column_name: population
        column_type: integer
    table_name: cities
level_tests:
  - test_query: "has_col?"
    expected_output: "name"
    error_message: "Your results should have the name column."
  - test_query: "has_col_count?"
    expected_output: "1"
    error_message: "Your results should only have exactly 1 column."
  - test_query: "has_row_count?"
    expected_output: 7
    error_message: "Your result should return all 7 rows from the cities table."
